buildscript {
	ext {
		springBootVersion = '2.0.0.RC1'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath('org.ajoberstar:gradle-git:1.4.2')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: 'jacoco'
apply plugin: 'org.ajoberstar.grgit'

project.group    = 'becoinc'
project.ext.name = 'kafka_manager'

project.version = "${grgit.head().abbreviatedId}"

jar {
    baseName = project.ext.name
    version  = project.version
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

// This causes non-reproducible builds.
// b/c it includes a build time.
//springBoot  {
//    buildInfo()
//}

// Enable reproducible builds.
bootJar {
    preserveFileTimestamps = false
    reproducibleFileOrder  = true
}

docker {
    baseImage 'openjdk:8-jre'
    maintainer 'Jeffrey Zampieron <jzampieron@beco.io>'
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compileOnly('org.projectlombok:lombok')

    // See https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/59
    compile("log4j:log4j:1.2.17")

    // Enable the prometheus integration.
    compile 'io.micrometer:micrometer-registry-prometheus'

    compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')

    compile( 'org.springframework.kafka:spring-kafka' )

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka
    // Pull in the whole ball of wax to get the ZK utils and such
    //
    // This version must match the version pulled by Spring kafka...
    compile( group: 'org.apache.kafka', name: 'kafka_2.11', version: '1.0.0' ) {
        exclude module: 'slf4j-log4j12'
    }

    testCompile("junit:junit")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile( 'org.springframework.kafka:spring-kafka-test' )
    testCompile( "org.projectlombok:lombok" )

}

def containerJarFileName = "${project.ext.name}-${grgit.head().abbreviatedId}.jar"

task buildDocker( type: Docker, dependsOn: [ bootJar ] ) {
    push = false
    applicationName = project.ext.name
    tagVersion = 'latest'
    // Keep extra volumes from appearing in certain docker volume providers.
    //volume( '/tmp' )
    exposePort( 8080 )
    // We need glibc for kafka streams b/c of rocksdb using the jni
    runCommand( 'apt-get -y update && apt-get -y install curl' )
    entryPoint( [ "java",
                  "-Djava.security.egd=file:/dev/./urandom",
                  "-Dinfo.build.version=${grgit.describe()}",
                  "-Xms256M", // Initial heap.
                  "-Xmx256M", // Max heap scale OUT not up.
                  "-Xss1M", // Stack is 1M
                  "-XX:+UseG1GC", // enable the G1 GC.
                  "-XX:ParallelGCThreads=2",
                  "-XX:ConcGCThreads=2",
                  //"-XX:+PrintGCDetails",
                  //"-XX:+PrintGCTimeStamps",
                  "-jar",
                  "/${containerJarFileName}" ] )
    addFile( bootJar.archivePath, containerJarFileName )
    /*
     * You can use a RUN command to "touch" the jar file so that it
     * has a file modification time (Docker creates all container
     * files in an "unmodified" state by default).
     * This actually isnâ€™t important for the simple app that we wrote,
     * but any static content (e.g. "index.html") would require the
     * file to have a modification time.
     */
    //runCommand( 'sh -c "touch /app.jar"')
}

build.dependsOn.add( [ buildDocker ] )
build.dependsOn.add( [ jacocoTestReport ] )

// The below mod to the test task allows the test target to run.
test {
    include '**/AllTests.class'
    //systemProperties.put( 'spring.config.location', 'file:src/dev/resources/application-dev.properties' )
}
